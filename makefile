ARCH := -mcpu=arm7tdmi
WARNS := -Wall -pedantic
CFLAGS := -O2 -Wall -march=armv4t -Wno-switch -Wno-multichar -ffast-math $(ARCH) -mtune=arm7tdmi -marm -faggressive-loop-optimizations -mlong-calls -flto ${CFLAGS}
LDFLAGS = -nostartfiles -Tlnkscript
DEBUG ?= false

a.out: main.c lib/crt0.o lib/font.o lib/input.o lib/halt.o gen/boards_rle.c gen/boards_packed.c
	$(CC) $(CFLAGS) $(LDFLAGS) $^

test: a.out
	mgba -3 a.out

# generated by c code
gen/%.c: build/gen_boards
	mkdir -p gen
	./build/gen_boards

# generated by re2c
gen/scanners/%.c: misc/%.r2c
	mkdir -p gen/scanners
	re2c $< -o $@

build/scanners/%.o: gen/scanners/%.c
	mkdir -p build/scanners
	clang $(WARNS) -c -O1 -g -o $@ $< -Wno-discarded-qualifiers

build/gen_boards: build/scanners/rle_header.o misc/gen_boards.c
	# -fsanitize=address -fno-omit-frame-pointer
	clang $(WARNS) -g -O0 -o $@ $^

lib/%.o: src/%.c
	mkdir -p lib
	$(CC) -c -o $@ $< $(CFLAGS)

lib/%.o: src/%.s
	mkdir -p lib
	$(AS) -o $@ $< $(ASFLAGS)

clean:
	rm -rf *.gba lib *.out *.elf *.sav
	rm -rf build gen

a.gba: a.out
	$(OBJCOPY) -O binary a.out a.gba

game.gba: a.gba
	./ht.pl -n "Game of Life" -clo game.gba a.gba
